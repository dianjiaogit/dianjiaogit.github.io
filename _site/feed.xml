<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-09-07T01:27:08+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">焦点的动力炉 | Jiao Dian’s Power Plant</title><subtitle>This is Jiao Dian's blog. A place for sharing notes about my thoughts. Just for FUN.
</subtitle><author><name>dianjiaogit</name></author><entry><title type="html">Consumer Data - Publishing</title><link href="http://localhost:4000/%E5%B7%A5%E4%BD%9C/2021/09/02/Consumer-Data-Publishing.html" rel="alternate" type="text/html" title="Consumer Data - Publishing" /><published>2021-09-02T00:15:25+08:00</published><updated>2021-09-02T00:15:25+08:00</updated><id>http://localhost:4000/%E5%B7%A5%E4%BD%9C/2021/09/02/Consumer%20Data%20Publishing</id><content type="html" xml:base="http://localhost:4000/%E5%B7%A5%E4%BD%9C/2021/09/02/Consumer-Data-Publishing.html">&lt;p&gt;From README of Consumer Data, here are the processes we need to do when we publish to beta and live.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd fabric&lt;/code&gt; goes to fabric/ directory first.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source .envrc&lt;/code&gt;, the purpose of this step is to set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POETRY_HTTP_BASIC_ARTIFACTORY_USERNAME&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PASSWORD&lt;/code&gt;. If it returns “Command not found” error, we can set them manually by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;portunus -r &amp;amp;&amp;amp; source ~/.jfrog-env &amp;amp;&amp;amp; export POETRY_HTTP_BASIC_ARTIFACTORY_USERNAME=&quot;${JFROG_USERNAME}&quot; POETRY_HTTP_BASIC_ARTIFACTORY_PASSWORD=&quot;${JFROG_ACCESS_TOKEN}&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poetry install&lt;/code&gt;, this step will install all the necessary packages. Make sure poetry is installed before running this step.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fab list_packages&lt;/code&gt;, fab was installed in the last step, but only works on Python 2.7. So if it says “fab command not found“, we may need to switch the Python version by using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;poetry env use python2.7&lt;/code&gt;, and then go to the directory of python2.7 and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;source bin/activate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fab --initial-sudo-password-prompt deploy:(latest|&amp;lt;revision&amp;gt;) -R beta-ops|live-ops|live-web&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fab --initial-sudo-password-prompt switch:&amp;lt;revision&amp;gt; -R beta-ops|live-ops|live-web&lt;/code&gt;, release on beta-ops first, check whether the changes is working on beta-ops. Send a release note email before releasing on live-ops and live-web.&lt;/p&gt;

&lt;p&gt;For checking on beta-ops, the server of beta-ops may need to restart by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo -uconsumerdata-svc -H bash&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sbin/service wsgi restart&lt;/code&gt;.&lt;/p&gt;</content><author><name>dianjiaogit</name></author><summary type="html">From README of Consumer Data, here are the processes we need to do when we publish to beta and live.</summary></entry><entry><title type="html">Triage Report - 生成步骤</title><link href="http://localhost:4000/%E5%B7%A5%E4%BD%9C/2021/08/19/Triage-Report%E7%94%9F%E6%88%90%E6%AD%A5%E9%AA%A4.html" rel="alternate" type="text/html" title="Triage Report - 生成步骤" /><published>2021-08-19T00:16:35+08:00</published><updated>2021-08-19T00:16:35+08:00</updated><id>http://localhost:4000/%E5%B7%A5%E4%BD%9C/2021/08/19/Triage%20Report%E7%94%9F%E6%88%90%E6%AD%A5%E9%AA%A4</id><content type="html" xml:base="http://localhost:4000/%E5%B7%A5%E4%BD%9C/2021/08/19/Triage-Report%E7%94%9F%E6%88%90%E6%AD%A5%E9%AA%A4.html">&lt;h2 id=&quot;连接到此服务器&quot;&gt;连接到此服务器&lt;/h2&gt;

&lt;p&gt;ssh moat-utils01.chicago.mintel.ad&lt;/p&gt;

&lt;h2 id=&quot;生成triage-report&quot;&gt;生成triage report&lt;/h2&gt;

&lt;p&gt;/data/moat_report/releases/current/scripts/send_triage_report.sh moat@mintel.com&lt;/p&gt;

&lt;h2 id=&quot;flowdock-moat回复&quot;&gt;Flowdock MOAT回复&lt;/h2&gt;

&lt;p&gt;在Flowdock MOAT组的这封邮件下面@Mohamed, #last_email_triaged&lt;/p&gt;</content><author><name>dianjiaogit</name></author><summary type="html">连接到此服务器</summary></entry><entry><title type="html">Portal - Gitlab项目笔记</title><link href="http://localhost:4000/%E5%B7%A5%E4%BD%9C/2021/08/19/Gitlab%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0-Portal.html" rel="alternate" type="text/html" title="Portal - Gitlab项目笔记" /><published>2021-08-19T00:15:39+08:00</published><updated>2021-08-19T00:15:39+08:00</updated><id>http://localhost:4000/%E5%B7%A5%E4%BD%9C/2021/08/19/Gitlab%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0-Portal</id><content type="html" xml:base="http://localhost:4000/%E5%B7%A5%E4%BD%9C/2021/08/19/Gitlab%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0-Portal.html">&lt;p&gt;此文档是我在学习Gitlab项目portal时所做的笔记。&lt;/p&gt;

&lt;h2 id=&quot;首先将项目clone到本地&quot;&gt;首先将项目clone到本地&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone xxxxx.git&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;然后创建一个新的branch&quot;&gt;然后创建一个新的branch&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git checkout -b [new-branch]&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;文件修改后&quot;&gt;文件修改后&lt;/h2&gt;

&lt;p&gt;修改后，用make help看看有什么指令，make lock重新生成一下Pipfile.lock,&lt;/p&gt;</content><author><name>dianjiaogit</name></author><summary type="html">此文档是我在学习Gitlab项目portal时所做的笔记。</summary></entry><entry><title type="html">SVN - case 1笔记</title><link href="http://localhost:4000/%E5%B7%A5%E4%BD%9C/2021/08/16/SVN%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html" rel="alternate" type="text/html" title="SVN - case 1笔记" /><published>2021-08-16T00:15:39+08:00</published><updated>2021-08-16T00:15:39+08:00</updated><id>http://localhost:4000/%E5%B7%A5%E4%BD%9C/2021/08/16/SVN%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="http://localhost:4000/%E5%B7%A5%E4%BD%9C/2021/08/16/SVN%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html">&lt;p&gt;此文档是我在学习svn项目第一个case时所做的笔记。&lt;/p&gt;

&lt;p&gt;我司在svn上的项目，通常包含三种版本，branch, release和trunk。&lt;/p&gt;

&lt;p&gt;branch里面包含的是当前项目目前正在开发中的各个branch。release里面包含的是当前项目的各个正式版本。&lt;/p&gt;

&lt;h2 id=&quot;1-创建branch&quot;&gt;1. 创建branch&lt;/h2&gt;

&lt;p&gt;通常我们对项目进行修改时，都是需要先从trunk把原代码复制到自己新建的branch。&lt;br /&gt;
命令行为： &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svn cp [trunk] [branch] -m 'message'&lt;/code&gt;&lt;br /&gt;
[trunk]为trunk的url&lt;br /&gt;
[branch]为自己要创建的branch的url，通常为”moat-xxxxxx-&amp;lt;description&amp;gt;“，xxxxxx为当前case id&lt;br /&gt;
‘message’通常为”MOAT-xxxxxx Create branch”&lt;/p&gt;

&lt;h2 id=&quot;2-本地branch修改完成后的检查&quot;&gt;2. 本地branch修改完成后的检查&lt;/h2&gt;

&lt;p&gt;当branch上的修改完成后，我们可以用svn命令来进行检查。&lt;br /&gt;
使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svn st&lt;/code&gt;来查看有哪些文件被改动了。&lt;br /&gt;
使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svn diff&lt;/code&gt;来查看具体改动的内容。&lt;/p&gt;

&lt;h2 id=&quot;3-从本地branch上传到云端服务器&quot;&gt;3. 从本地branch上传到云端服务器&lt;/h2&gt;

&lt;p&gt;使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svn ci -m &quot;message&quot;&lt;/code&gt;来把改动上传。&lt;br /&gt;
message格式为“MOAT-xxxxxx: &amp;lt;description&amp;gt;”&lt;/p&gt;

&lt;h2 id=&quot;4-下载trunk代码到本地&quot;&gt;4. 下载trunk代码到本地&lt;/h2&gt;

&lt;p&gt;使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svn co [trunk]&lt;/code&gt;将trunk代码下载到本地。&lt;/p&gt;

&lt;h2 id=&quot;5-将branch-merge到trunk&quot;&gt;5. 将branch merge到trunk&lt;/h2&gt;

&lt;p&gt;先进入到trunk文件夹内。&lt;br /&gt;
然后分别使用&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;svnmerge init [branch]  
svn ci -F svnmerge-commit-message.txt
svnmerge avail -l -S [branch]
svnmerge merge -r[xxx] -S [branch] //此处可为-r[xxx],[xxx],[xxx]或者-r[xxx]:[xxx]
svn diff
svn ci -F svnmerge-commit-message.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;6-下载release代码到本地&quot;&gt;6. 下载release代码到本地&lt;/h2&gt;

&lt;p&gt;使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svn co [release]&lt;/code&gt;将release代码下载到本地。&lt;/p&gt;

&lt;h2 id=&quot;7-将trunk-merge到release&quot;&gt;7. 将trunk merge到release&lt;/h2&gt;

&lt;p&gt;先进入到release文件夹内。&lt;br /&gt;
然后分别使用&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;svnmerge avail -l
svnmerge merge -r[xxx] -S [trunk] //此处可为-r[xxx],[xxx],[xxx]或者-r[xxx]:[xxx]
svn diff
svn ci -F svnmerge-commit-message.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;8-删除之前所创建的branch&quot;&gt;8. 删除之前所创建的branch&lt;/h2&gt;

&lt;p&gt;使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svn rm [branch] -m &quot;message&quot;&lt;/code&gt;来删除之前创建的branch。&lt;br /&gt;
message的内容通常为Remove branch&lt;/p&gt;</content><author><name>dianjiaogit</name></author><summary type="html">此文档是我在学习svn项目第一个case时所做的笔记。</summary></entry><entry><title type="html">Django - 基础学习笔记</title><link href="http://localhost:4000/%E5%B7%A5%E4%BD%9C/2021/08/03/Django%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0.html" rel="alternate" type="text/html" title="Django - 基础学习笔记" /><published>2021-08-03T00:15:39+08:00</published><updated>2021-08-03T00:15:39+08:00</updated><id>http://localhost:4000/%E5%B7%A5%E4%BD%9C/2021/08/03/Django%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0</id><content type="html" xml:base="http://localhost:4000/%E5%B7%A5%E4%BD%9C/2021/08/03/Django%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0.html">&lt;p&gt;此文档是我在阅读学习Django时所做的笔记。学习网站：https://docs.djangoproject.com/en/3.2/&lt;/p&gt;

&lt;h2 id=&quot;0-overview&quot;&gt;0. Overview&lt;/h2&gt;

&lt;p&gt;Django是python的web开发框架，遵循MVC(model-view-controller)的设计模式，但在Django中通常称为MTV(model-template-views)。model是数据持久层，主要存放实体映射、实体关系以及实体的一些方法。template是表示层，主要是用来显示数据，Django的视图引擎可以将其渲染成HTML并显示。views是业务逻辑层，在Django中充当着链接model与template的桥梁，处理模型并向template提交数据，同时也接受template的请求和参数，完成相应的逻辑后提交模型修改。&lt;/p&gt;

&lt;h3 id=&quot;views和url&quot;&gt;Views和URL&lt;/h3&gt;

&lt;p&gt;Views是业务逻辑层，在Django里面views通常是一个的views.py模块，放在对应的包里。views.py里面是具体的逻辑函数，每一个函数对应着一个或多个模版，为了建立模版与视图的联系，还要有一定的路由机制，于是Django通常在根目录有一个路由程序urls.py。路由由patterns来创建，用正则表达式来描述，极大地提高了路由机制的灵活性。&lt;/p&gt;

&lt;h3 id=&quot;模版template&quot;&gt;模版(Template)&lt;/h3&gt;

&lt;p&gt;模版在Django中是显示数据的地方，通常为HTML格式，在模版中Django的处理逻辑要写在{\% \%}中，而要显示的变量要写在{{ }}中。Django的母板页可以用任何文档充当，前提是要用{\% block name \%}{\% endblock \%}声明要填充或替换的块，而使用时只需{\% extends 母版名字 \%}然后调用相应的块就可以了。&lt;/p&gt;

&lt;h3 id=&quot;模型&quot;&gt;模型&lt;/h3&gt;

&lt;p&gt;在setting.py 中的database的字典中配置数据库。配置完成后 使用manage.py startapp来创建app在models中编写python代码描述实体映射。models.py&lt;/p&gt;

&lt;h2 id=&quot;1-创建初始项目&quot;&gt;1. 创建初始项目&lt;/h2&gt;

&lt;p&gt;创建新的初始项目指令：&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$ django-admin startproject mysite&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;初始项目的框架构成为：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mysite/
	manage.py  
	mysite/
		__init__.py
		settings.py
		urls.py
		asgi.py
		wsgi.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中，manage.py是命令行工具，用来和本项目交互和管理。&lt;br /&gt;
__init__.py用来表明本目录是python包。  &lt;br /&gt;
setting.py是配置文件，查看项目如何工作。&lt;br /&gt;
urls.py是URL声明，就像是网站的“目录”。&lt;br /&gt;
asgi.py是ASGI兼容的web服务器入口，用来运行项目。&lt;br /&gt;
wsgi.py是WSGI兼容的web服务器入口，用来运行项目。&lt;/p&gt;

&lt;h2 id=&quot;2-启动服务器&quot;&gt;2. 启动服务器&lt;/h2&gt;

&lt;p&gt;启动服务器的命令为：&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3 manage.py runserver 0.0.0.0:8000&lt;/code&gt;&lt;br /&gt;
之后在浏览器输入服务器ip:127.0.0.1:8000,就可以显示了。&lt;/p&gt;

&lt;p&gt;用于开发的服务器在需要的情况下会对每一次的访问请求重新载入一遍 Python 代码。所以你不需要为了让修改的代码生效而频繁的重新启动服务器。然而，一些动作，比如添加新文件，将不会触发自动重新加载，这时你得自己手动重启服务器。&lt;/p&gt;

&lt;h2 id=&quot;3-创建应用&quot;&gt;3. 创建应用&lt;/h2&gt;

&lt;p&gt;创建应用的命令为：&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python manage.py startapp polls&lt;/code&gt;&lt;br /&gt;
应用的目录结构为：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;polls/
    __init__.py
    admin.py
    apps.py
    migrations/
        __init__.py
    models.py
    tests.py
    views.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3-添加视图文件&quot;&gt;3. 添加视图文件&lt;/h2&gt;

&lt;p&gt;视图文件是在polls目录下的views.py文件。&lt;/p&gt;

&lt;p&gt;内容为：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.http import HttpResponse

def index(request):
    return HttpResponse(&quot;Hello, world. You're at the polls index.&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当视图文件的index function被调用时，网站会通过http回复string “Hello, world. You’re at the polls index.”。&lt;/p&gt;

&lt;h2 id=&quot;4-修改url配置&quot;&gt;4. 修改URL配置&lt;/h2&gt;

&lt;p&gt;在polls下创建一个urls.py，内容为：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.urls import path

from . import views

urlpatterns = [
    path('', views.index, name='index'),
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;目的是创建url映射到index.&lt;br /&gt;
然后在mysite/urls.py的urlpatterns插入一个include().&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.contrib import admin
from django.urls import include, path

urlpatterns = [
    path('polls/', include('polls.urls')),
    path('admin/', admin.site.urls),
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;include()的设计理念是使其可以即插即用，在其他路径下，应用都能正常工作。&lt;/p&gt;

&lt;p&gt;path()参数： route, view, kwargs, name.  &lt;br /&gt;
route – 匹配url&lt;br /&gt;
view – 调用视图函数&lt;/p&gt;

&lt;h2 id=&quot;5-数据库配置&quot;&gt;5. 数据库配置&lt;/h2&gt;

&lt;p&gt;在mysite/settings.py中设置DATABASES ‘default’ ENGINE后端以及NAME数据库名称。还有USER, PASSWORD, HOST等等。&lt;br /&gt;
TIME_ZONE应设置为自己的时区。&lt;/p&gt;

&lt;p&gt;INSTALLED_APPS 默认包括了以下 Django 的自带应用：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;django.contrib.admin – 管理员站点。&lt;/li&gt;
  &lt;li&gt;django.contrib.auth – 认证授权系统。&lt;/li&gt;
  &lt;li&gt;django.contrib.contenttypes – 内容类型框架。&lt;/li&gt;
  &lt;li&gt;django.contrib.sessions – 会话框架。&lt;/li&gt;
  &lt;li&gt;django.contrib.messages – 消息框架。&lt;/li&gt;
  &lt;li&gt;django.contrib.staticfiles – 管理静态文件的框架。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们可以通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python manage.py migrate&lt;/code&gt;来检查INSTALLED_APPS设置，为其中的每个应用创建需要的数据表，具体取决于mysite/settings.py设置文件和每个应用的数据库迁移文件。&lt;/p&gt;

&lt;p&gt;对于MySQL来说，输入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHOW TABLES&lt;/code&gt;可以看到Django创建了哪些表。&lt;/p&gt;

&lt;h2 id=&quot;6-创建模型&quot;&gt;6. 创建模型&lt;/h2&gt;

&lt;p&gt;模型在polls/models.py进行创建。这里我们创建两个模型：问题Question和选项Choice。&lt;br /&gt;
Question模型包括问题描述和发布时间。Choice模型有两个字段，选项描述和当前得票数。每个选项属于一个问题。&lt;/p&gt;

&lt;p&gt;模型被表示为django.db.models.Model类的子类。每个模型有许多类变量，它们都表示模型里的一个数据库字段。&lt;/p&gt;

&lt;p&gt;每个字段都是Field类的实例 - 比如，字符字段被表示为CharField，日期时间字段被表示为DateTimeField。这将告诉Django每个字段要处理的数据类型。&lt;/p&gt;

&lt;p&gt;每个 Field 类实例变量的名字（例如 question_text 或 pub_date ）也是字段名，所以最好使用对机器友好的格式。你将会在 Python 代码里使用它们，而数据库会将它们作为列名。&lt;/p&gt;

&lt;p&gt;定义某些 Field 类实例需要参数或者可选参数 default 。例如 CharField 需要一个 max_length 参数。这个参数的用处不止于用来定义数据库结构，也用于验证数据。&lt;/p&gt;

&lt;p&gt;使用 ForeignKey 定义了关系。告诉 Django，每个 Choice 对象都关联到一个 Question 对象。Django 支持所有常用的数据库关系：多对一、多对多和一对一。&lt;/p&gt;

&lt;h2 id=&quot;7-激活模型&quot;&gt;7. 激活模型&lt;/h2&gt;

&lt;p&gt;将polls安装进项目，在INSTALLED_APPS 中添加设置。因为 PollsConfig 类写在文件 polls/apps.py 中，所以它的点式路径是 ‘polls.apps.PollsConfig’。在文件 mysite/settings.py 中 INSTALLED_APPS 子项添加点式路径。&lt;/p&gt;

&lt;p&gt;通过运行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python manage.py makemigrations polls&lt;/code&gt;， Django 会检测你对模型文件的修改（在这种情况下，你已经取得了新的），并且把修改的部分储存为一次迁移。&lt;br /&gt;
通过运行&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python manage.py sqlmigrate polls 0001&lt;/code&gt;， 我们会看到迁移命令会执行哪些 SQL 语句。&lt;/p&gt;

&lt;p&gt;改变模型需要这三步：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;编辑 models.py 文件，改变模型。&lt;/li&gt;
  &lt;li&gt;运行 python manage.py makemigrations 为模型的改变生成迁移文件。&lt;/li&gt;
  &lt;li&gt;运行 python manage.py migrate 来应用数据库迁移。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;8-使用api&quot;&gt;8. 使用API&lt;/h2&gt;

&lt;p&gt;通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python manage.py shell&lt;/code&gt;来进入交互式Python命令行。manage.py 会设置 DJANGO_SETTINGS_MODULE 环境变量，这个变量会让 Django 根据 mysite/settings.py 文件来设置 Python 包的导入路径。&lt;/p&gt;

&lt;p&gt;all(), filter(), include(), exclude(), save(), add(), get(), delete(), count()……&lt;/p&gt;

&lt;p&gt;在models.py给模型增加 &lt;strong&gt;str&lt;/strong&gt;() 能使其在命令行里使用更方便。&lt;/p&gt;

&lt;h2 id=&quot;9-django管理页面&quot;&gt;9. Django管理页面&lt;/h2&gt;

&lt;p&gt;通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python manage.py createsuperuser&lt;/code&gt;键入用户名，邮件地址和密码，创建一个能登录管理页面的用户。&lt;/p&gt;

&lt;p&gt;Django 的管理界面默认就是启用的。在’http://127.0.0.1:8000/admin/’ 可以看到管理员登录界面。&lt;/p&gt;

&lt;p&gt;在polls/admin.py中为Question对象设置一个后台接口。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.contrib import admin

from .models import Question

admin.site.register(Question)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;进入Question页面后，页面的底部提供了几个选项：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;保存（Save） - 保存改变，然后返回对象列表。&lt;/li&gt;
  &lt;li&gt;保存并继续编辑（Save and continue editing） - 保存改变，然后重新载入当前对象的修改界面。&lt;/li&gt;
  &lt;li&gt;保存并新增（Save and add another） - 保存改变，然后添加一个新的空对象并载入修改界面。&lt;/li&gt;
  &lt;li&gt;删除（Delete） - 显示一个确认删除页面。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;10-编写更多视图&quot;&gt;10. 编写更多视图&lt;/h2&gt;

&lt;p&gt;首先，在你的 polls 目录里创建一个 templates 目录。Django 将会在这个目录里查找模板文件。&lt;/p&gt;

&lt;p&gt;你项目的 TEMPLATES 配置项描述了 Django 如何载入和渲染模板。默认的设置文件设置了 DjangoTemplates 后端，并将 APP_DIRS 设置成了 True。这一选项将会让 DjangoTemplates 在每个 INSTALLED_APPS 文件夹中寻找 “templates” 子目录。这就是为什么尽管我们没有像在第二部分中那样修改 DIRS 设置，Django 也能正确找到 polls 的模板位置的原因。&lt;/p&gt;

&lt;p&gt;在你刚刚创建的 templates 目录里，再创建一个目录 polls，然后在其中新建一个文件 index.html 。换句话说，你的模板文件的路径应该是 polls/templates/polls/index.html 。因为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app_directories&lt;/code&gt; 模板加载器是通过上述描述的方法运行的，所以 Django 可以引用到 polls/index.html 这一模板了。&lt;/p&gt;

&lt;p&gt;然后在views中使用模板：&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from django.http import HttpResponse
from django.template import loader

from .models import Question


def index(request):
    latest_question_list = Question.objects.order_by('-pub_date')[:5]
    template = loader.get_template('polls/index.html')
    context = {
        'latest_question_list': latest_question_list,
    }
    return HttpResponse(template.render(context, request))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;render()是一个快捷函数。使用它可以不再需要导入 loader 和 HttpResponse 。不过如果你还有其他函数（比如说 detail, results, 和 vote ）需要用到它的话，就需要保持 HttpResponse 的导入。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def index(request):
    latest_question_list = Question.objects.order_by('-pub_date')[:5]
    context = {'latest_question_list': latest_question_list}
    return render(request, 'polls/index.html', context)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;11-抛出404&quot;&gt;11. 抛出404&lt;/h2&gt;

&lt;p&gt;我们可以加入一个try except，如果指定问题 ID 所对应的问题不存在，这个视图就会抛出一个 Http404 异常。&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def detail(request, question_id):
    try:
        question = Question.objects.get(pk=question_id)
    except Question.DoesNotExist:
        raise Http404(&quot;Question does not exist&quot;)
    return render(request, 'polls/detail.html', {'question': question})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;快捷函数为get_object_or_404()，也有 get_list_or_404() 函数，工作原理和 get_object_or_404() 一样，除了 get() 函数被换成了 filter() 函数。如果列表为空的话会抛出 Http404 异常。&lt;/p&gt;</content><author><name>dianjiaogit</name></author><summary type="html">此文档是我在阅读学习Django时所做的笔记。学习网站：https://docs.djangoproject.com/en/3.2/</summary></entry><entry><title type="html">可爱的孩子们</title><link href="http://localhost:4000/for%20her/2021/04/30/Kids.html" rel="alternate" type="text/html" title="可爱的孩子们" /><published>2021-04-30T00:00:00+08:00</published><updated>2021-04-30T00:00:00+08:00</updated><id>http://localhost:4000/for%20her/2021/04/30/Kids</id><content type="html" xml:base="http://localhost:4000/for%20her/2021/04/30/Kids.html">&lt;p&gt;这里记录了我们最可爱的Yvonne老师，和她班里可爱孩子们的趣味小故事。这既是与小朋友们朝夕相处的过程，同时也是自己成长的一个过程，这些都将成为自己珍贵的回忆。从这些故事中，感受童趣和纯真，以及小朋友们有爱的每个瞬间。愿我们也能像孩子们一样保持一颗赤子之心，永远纯真，永远可爱，永远自由善良。&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ronny篇&quot;&gt;Ronny篇：&lt;/h2&gt;

&lt;p&gt;一年级时，Ronny故意装疯卖傻搞笑；二年级上学期，Justiy来了，Ronny就正常了，他肯定想：不行，老师搞一个已经很累了，我得乖一点。然后这学期Toby来了，Justiy就消停了点，也肯定想：还有这样的，比我还厉害。&lt;/p&gt;

&lt;p&gt;Ronny被校长抱出去了，说这孩子好像不能和人connect，他有自己的世界，经常说自己是外星人。状态和天气影响很大，特别兴奋时会控制不住自己，满教室到处跑，精力用不完。曾经还和男外教较过力。&lt;/p&gt;

&lt;p&gt;Ronny用自己的house point换的奖品是让我中午陪他去操场散步。&lt;/p&gt;

&lt;p&gt;Ronny很细心。在class party上给其他老师带的咖啡，给我买的是其他饮料。可能平时在偷听老师聊天，默默观察。&lt;/p&gt;

&lt;p&gt;男生之间的友谊，真的看不懂。上次Justiy还打Ronny呢，Ronny今天中午抓着Justiy又要亲，说不亲脸蛋，亲手手。然后刚才美术课，又打起来了。因为Justiy觉得Ronny画的乱七八糟的，太丑了。&lt;/p&gt;

&lt;p&gt;多才多艺的Ronny，在学校见到架子鼓，“妈呀，真鼓呀！”，说这个和他家里的不一样，只有两个镲，家里是假鼓。&lt;/p&gt;

&lt;p&gt;Ronny看了焦点的照片，说这人不大好看，但是还行，不是说特别丑那种。&lt;/p&gt;

&lt;p&gt;班上小朋友过生日，每人发了一盒饼干。有个孩子的饼干不见了，我就把我的给了他。然后Ronny就硬要把他的给我，我说不用，你可以带给你妈妈吃。结果他就故意生气地自己的都吃完了。&lt;/p&gt;

&lt;p&gt;Ronny装病逃课，下课跑得比谁都欢，在保健室半个小时就说头疼，结果保健室的老师观察下来没什么问题。&lt;/p&gt;

&lt;p&gt;学校举办萤火虫主题的活动，Ronny直接穿了件画着萤火虫各个部分学名的体恤，完美符合主题。&lt;/p&gt;

&lt;p&gt;有人在走廊关灯吓唬Ronny，Ronny回家和妈妈撒娇告状说自己摔了，没想到妈妈会去找学校反映。一番调查发现是Ronny报假警，其实根本没摔，还被老师说了一顿。好惨一孩子。&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;toby篇&quot;&gt;Toby篇：&lt;/h2&gt;

&lt;p&gt;之前以为Toby是装疯卖傻，后来发现是真傻。&lt;/p&gt;

&lt;p&gt;有一天有个小朋友要早接，就理书包，toby也要跟着去，也开始理书包。老师说：还没放学呢，是那个小朋友要早走。他还继续理书包。然后理到一半，说：“我现在在干什么？为什么我要理书包？”&lt;/p&gt;

&lt;p&gt;放学回家，老师和同学们都往那边走，Toby就硬要往另一个方向走，还说：你们人呢？&lt;/p&gt;

&lt;p&gt;别人上课学习，他上课唱歌。&lt;/p&gt;

&lt;p&gt;上课时突然大叫：什么时候吃饭啊 我好饿啊&lt;/p&gt;

&lt;p&gt;Toby出去了一段时间，回来时拿了一堆纸，和老师说：“老师，我在厕所地上捡到那么多的纸。你看，浪费。” 老师：“你拿给我什么意思。。。”&lt;/p&gt;

&lt;p&gt;有个小朋友魔方找不到，后来又找到了。等到下节课了，Toby才后知后觉地问，“在哪儿找到的？”，大家提醒他已经上课了，他就捂着嘴（表示悄悄话）大声说，“老师，你们哪里找到的？”&lt;/p&gt;

&lt;p&gt;因为Toby是新生，所以给他找了个buddy，没过几天buddy就被搞得神经衰弱，老师叫toby他都跟着紧张。后来换成了oscar，是个学霸，本来上课能写一页的，现在因为toby，就只写了一行。&lt;/p&gt;

&lt;p&gt;但Toby很懂事，回家和妈妈说同学对他都很好，老师还特意安排小伙伴帮助自己。&lt;/p&gt;

&lt;p&gt;Toby突然摸了摸我胸。。。前衣服上的星星，问，“这是什么？好像很舒服”&lt;/p&gt;

&lt;p&gt;上课突然来剥墙上的墙皮，往别人身上扔，觉得很有趣，问道“为什么？这是什么？为什么会可以掉下来？”&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;其他&quot;&gt;其他：&lt;/h2&gt;

&lt;p&gt;有个小朋友语文作业没带，被语文老师叫走了。回来后，和组员抱怨到：“我妈咋回事？咋连这点小事都没做好” 原来是爸爸妈妈去迪士尼玩了，丢下她和弟弟去约会。可能又要有一个新弟弟或者妹妹了吧~&lt;/p&gt;

&lt;p&gt;Adam的语文作业，让写作文，结果Adam写了个英文的，每个方格里写一个单词，单词之间还空一格。&lt;/p&gt;

&lt;p&gt;Wilson在纸飞机上写“想和Sammy去长long”，Sammy在纸飞机上写“想和Wilson出去玩”。&lt;/p&gt;

&lt;p&gt;Justiy在纸飞机上写“想和Mabel jie hun”，但Mabel喜欢XiaoXing。 Toby也喜欢Mabel，还去牵她的手。&lt;/p&gt;

&lt;p&gt;Eden说自己不想写，没有愿望。经过语文老师的鼓励后，写下“希望语文老师越来越漂亮”。&lt;/p&gt;

&lt;p&gt;看了同学们的分享视频后，一个小朋友对Justiy说，我好羡慕你，有那么漂亮的妈妈。&lt;/p&gt;

&lt;p&gt;上课的时候，小朋友不好好听课，痴痴看着我，我叫她看前面听老师讲课。她说，“哪有你好看”。&lt;/p&gt;

&lt;p&gt;最近不知道在流行什么游戏，男生们喜欢在排队的时候hold hands tightly and kiss each other，还喜欢发射爱心啥的，就很油腻。&lt;/p&gt;

&lt;p&gt;教孩子们做眼保健操，有个小朋友哭了，问了才知道，原来是按到眼睛上了。好危险，以后得多加注意呀。&lt;/p&gt;

&lt;p&gt;有个孩子特别喜欢奥特曼，美术课上画的也是奥特曼打怪兽。语文课上老师让他用“要想。。。就。。。”和“就算。。。也。。。”来造句。他造的句是“要想看到奥特曼，就得先看到怪兽。”和“就算你不喜欢奥特曼，我也喜欢奥特曼。”&lt;/p&gt;</content><author><name>dianjiaogit</name></author><summary type="html">这里记录了我们最可爱的Yvonne老师，和她班里可爱孩子们的趣味小故事。这既是与小朋友们朝夕相处的过程，同时也是自己成长的一个过程，这些都将成为自己珍贵的回忆。从这些故事中，感受童趣和纯真，以及小朋友们有爱的每个瞬间。愿我们也能像孩子们一样保持一颗赤子之心，永远纯真，永远可爱，永远自由善良。</summary></entry><entry><title type="html">Software Security Notes 8 Binary modification</title><link href="http://localhost:4000/notes/software%20security/2021/03/10/SS-notes.html" rel="alternate" type="text/html" title="Software Security Notes 8 Binary modification  " /><published>2021-03-10T09:00:00+08:00</published><updated>2021-03-10T09:00:00+08:00</updated><id>http://localhost:4000/notes/software%20security/2021/03/10/SS%20notes</id><content type="html" xml:base="http://localhost:4000/notes/software%20security/2021/03/10/SS-notes.html">&lt;h2 id=&quot;hex-editing&quot;&gt;Hex Editing&lt;/h2&gt;
&lt;p&gt;know where to edit, directly edit using hex editor.&lt;br /&gt;
only allows in-place editing. No adding new bytes.&lt;br /&gt;
But can rewrite padding bytes, dead code, or unused data.&lt;/p&gt;

&lt;p&gt;LD_PRELOAD: specify libraries for the linker to load before.&lt;/p&gt;

&lt;h2 id=&quot;injecting-a-code-section&quot;&gt;Injecting a code section&lt;/h2&gt;

&lt;p&gt;By appending bytes to the end of the binary.&lt;br /&gt;
Create a section header.&lt;br /&gt;
Create a program header.&lt;br /&gt;
Rename the section name in .shstrtab&lt;br /&gt;
Call the injected code.&lt;/p&gt;

&lt;p&gt;PT_NOTE header saft to overwrite.&lt;br /&gt;
Need to change type to SHT_PROGBITS.&lt;/p&gt;

&lt;p&gt;Injected code will run when the program starts.&lt;/p&gt;

&lt;h2 id=&quot;hijacking-got-entries&quot;&gt;Hijacking GOT entries&lt;/h2&gt;
&lt;p&gt;Replace GOT entry to replace a library call with an injected function.&lt;/p&gt;

&lt;p&gt;Only work for library calls.&lt;br /&gt;
directly modify direct call instructions.&lt;/p&gt;

&lt;p&gt;Position Independent Executables (PIE)&lt;/p&gt;</content><author><name>dianjiaogit</name></author><summary type="html">Hex Editing know where to edit, directly edit using hex editor. only allows in-place editing. No adding new bytes. But can rewrite padding bytes, dead code, or unused data.</summary></entry><entry><title type="html">Software Security Notes 7 Disassembly and Binary Analysis Properties</title><link href="http://localhost:4000/notes/software%20security/2021/03/09/SS-notes.html" rel="alternate" type="text/html" title="Software Security Notes 7 Disassembly and Binary Analysis Properties  " /><published>2021-03-09T07:00:00+08:00</published><updated>2021-03-09T07:00:00+08:00</updated><id>http://localhost:4000/notes/software%20security/2021/03/09/SS%20notes</id><content type="html" xml:base="http://localhost:4000/notes/software%20security/2021/03/09/SS-notes.html">&lt;h2 id=&quot;function-dectection&quot;&gt;Function Dectection&lt;/h2&gt;

&lt;p&gt;Called directly by the $call$ instruction.&lt;br /&gt;
Indirect all is hard to dectect.&lt;/p&gt;

&lt;h2 id=&quot;object-oriented-code&quot;&gt;Object-Oriented Code&lt;/h2&gt;
&lt;p&gt;We only discuss about C code in this course&lt;/p&gt;

&lt;h2 id=&quot;structuring-data&quot;&gt;Structuring Data&lt;/h2&gt;
&lt;p&gt;Automatic data struction detection in stripped binaries is a notoriouly difficult problem&lt;br /&gt;
Some codes can be compiled into similar instructions&lt;/p&gt;

&lt;h2 id=&quot;decompilation&quot;&gt;Decompilation&lt;/h2&gt;
&lt;p&gt;Guessing function signatures and local variables&lt;br /&gt;
Recovering control flows and function calls&lt;/p&gt;

&lt;p&gt;Intermediate Representation&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Abstration&lt;/li&gt;
  &lt;li&gt;Goal: translate Machine code to IR code&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;binary-analysis-properties&quot;&gt;Binary Analysis Properties&lt;/h1&gt;
&lt;p&gt;Interprocedural and intraprocedural&lt;br /&gt;
Flow sensitivity&lt;br /&gt;
Context sensitivity&lt;/p&gt;

&lt;h2 id=&quot;intraprocedural&quot;&gt;Intraprocedural&lt;/h2&gt;
&lt;p&gt;Code within a single function at a time&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Maybe incomplete&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;interprocedural&quot;&gt;Interprocedural&lt;/h2&gt;
&lt;p&gt;Consider entire program as a whole&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Might take long so results no longer matter.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;flow-sensitivity&quot;&gt;Flow Sensitivity&lt;/h2&gt;
&lt;p&gt;Take the order of the instructions into account.&lt;br /&gt;
Either flow-sensitive or flow-insensitive.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;flow-sensitive more conplex.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;context-sensitivity&quot;&gt;Context Sensitivity&lt;/h2&gt;
&lt;p&gt;Take the order of the function invocation into account.&lt;/p&gt;

&lt;h2 id=&quot;loop-detection&quot;&gt;Loop Detection&lt;/h2&gt;
&lt;p&gt;Implemented using $jump$ instructions.&lt;br /&gt;
Most execution time is spent in loops.&lt;br /&gt;
Buffer overflow tends in occur in loops.&lt;/p&gt;

&lt;p&gt;Compilers use dominance trees to determine natural loops.&lt;/p&gt;

&lt;h2 id=&quot;reaching-definition-analysis&quot;&gt;Reaching Definition Analysis&lt;/h2&gt;
&lt;p&gt;Reachable data definitions from this point.&lt;br /&gt;
CFG level.&lt;br /&gt;
Which can reach at the start.  Which can still be alive after.&lt;/p&gt;

&lt;h2 id=&quot;program-slicing&quot;&gt;Program Slicing&lt;/h2&gt;
&lt;p&gt;Find irrelevant slices and remove them.&lt;/p&gt;</content><author><name>dianjiaogit</name></author><summary type="html">Function Dectection</summary></entry><entry><title type="html">Software Security Notes 6 Disassembly</title><link href="http://localhost:4000/notes/software%20security/2021/03/04/SS-notes.html" rel="alternate" type="text/html" title="Software Security Notes 6 Disassembly" /><published>2021-03-04T07:00:00+08:00</published><updated>2021-03-04T07:00:00+08:00</updated><id>http://localhost:4000/notes/software%20security/2021/03/04/SS%20notes</id><content type="html" xml:base="http://localhost:4000/notes/software%20security/2021/03/04/SS-notes.html">&lt;h1 id=&quot;static-disassembly&quot;&gt;Static Disassembly&lt;/h1&gt;
&lt;p&gt;Load a binary&lt;br /&gt;
find machine instructions in binary&lt;br /&gt;
disassemble into human- or machine readable form&lt;/p&gt;

&lt;h2 id=&quot;recursive-disassembly&quot;&gt;Recursive Disassembly&lt;/h2&gt;
&lt;p&gt;Starts from known entry points&lt;br /&gt;
Recursively follows control flow&lt;br /&gt;
Used in many reverse-engineering applications&lt;/p&gt;

&lt;h1 id=&quot;dynamic-disassembly&quot;&gt;Dynamic Disassembly&lt;/h1&gt;
&lt;p&gt;Runtime information can resolve indirect calls, distinguishing data vs code&lt;br /&gt;
It allows for execution tracers to dump instructions, memory/register contents&lt;br /&gt;
Code coverage problem&lt;/p&gt;

&lt;h2 id=&quot;code-coverage&quot;&gt;Code coverage&lt;/h2&gt;
&lt;h3 id=&quot;test-suites&quot;&gt;test suites&lt;/h3&gt;
&lt;p&gt;Use known test inputs, manually developed, toincrease code coverage.&lt;br /&gt;
Trying to cover as much of the program’s functionality as possible.&lt;br /&gt;
Ready-made test suites aren’t always available.&lt;br /&gt;
Application specific.&lt;/p&gt;

&lt;h3 id=&quot;fuzzing&quot;&gt;Fuzzing&lt;/h3&gt;
&lt;p&gt;Automatically generate inputs&lt;br /&gt;
Favoring executing lots of tests to heavy duty analysis&lt;br /&gt;
Generation-based fuzzer&lt;br /&gt;
Mutation-based fuzzer&lt;/p&gt;

&lt;h2 id=&quot;symbolic-execution&quot;&gt;Symbolic Execution&lt;/h2&gt;
&lt;p&gt;Execute not with concrete values but symblic values&lt;br /&gt;
One exection path will generate a set of constraints&lt;br /&gt;
Path explosion&lt;/p&gt;

&lt;h1 id=&quot;structuring-disassembled-code-and-data&quot;&gt;Structuring Disassembled Code and Data&lt;/h1&gt;
&lt;p&gt;Compartmentalizing&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Breaking code into logically connected chunks and make it easier to understand the relationship between chunks.&lt;br /&gt;
Revealing control flow&lt;/li&gt;
  &lt;li&gt;Some structures can reveal control flow. Especially in visual representation, it can make it easier to see how control flows through the code and to get a quick idea of what the code does.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;functions&quot;&gt;Functions&lt;/h2&gt;
&lt;p&gt;logically connected codes&lt;br /&gt;
function detection&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;binaries can be stripped&lt;/li&gt;
  &lt;li&gt;code might be scattered&lt;/li&gt;
  &lt;li&gt;overlapping code blocks&lt;/li&gt;
  &lt;li&gt;Assume functions are contiguous and don’t share code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Based on function signatures:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;well-known patterns and epilogues&lt;/li&gt;
  &lt;li&gt;vary depending on the platform, compiler and optimization level used.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use $call$ for function so easy to locate.&lt;br /&gt;
Indirect and tail-call function&lt;/p&gt;

&lt;h2 id=&quot;control-flow-graph&quot;&gt;Control Flow Graph&lt;/h2&gt;
&lt;p&gt;CFG organize the inernals of a function&lt;br /&gt;
automated analysis, manual analysis&lt;br /&gt;
graphic representation&lt;br /&gt;
basic blocks: 1st instruction is the only entry point, last instruction is the only exit point&lt;br /&gt;
call edges are not part of CFG&lt;/p&gt;

&lt;h2 id=&quot;call-graph&quot;&gt;Call Graph&lt;/h2&gt;
&lt;p&gt;show relationship between call sites and functions rather than basic blocks&lt;br /&gt;
indirect call not shown in call graph&lt;/p&gt;

&lt;p&gt;direct call: call the specific funtion or address&lt;br /&gt;
indirect call: call the address stored in a register.&lt;/p&gt;</content><author><name>dianjiaogit</name></author><summary type="html">Static Disassembly Load a binary find machine instructions in binary disassemble into human- or machine readable form</summary></entry><entry><title type="html">Software Security Notes 5 Basic Binary Analysis in Linux</title><link href="http://localhost:4000/notes/software%20security/2021/03/03/SS-notes.html" rel="alternate" type="text/html" title="Software Security Notes 5 Basic Binary Analysis in Linux" /><published>2021-03-03T09:00:00+08:00</published><updated>2021-03-03T09:00:00+08:00</updated><id>http://localhost:4000/notes/software%20security/2021/03/03/SS%20notes</id><content type="html" xml:base="http://localhost:4000/notes/software%20security/2021/03/03/SS-notes.html">&lt;h2 id=&quot;continue&quot;&gt;(Continue)&lt;/h2&gt;

&lt;h3 id=&quot;4-analysing-the-shared-library&quot;&gt;4. Analysing the shared library&lt;/h3&gt;

&lt;p&gt;Use $nm$ to demangle.&lt;br /&gt;
Looking for hints with $strings$, read all the displayable texts.&lt;br /&gt;
$LD\_LIBRARY\_PATH$ to add library path.&lt;br /&gt;
$echo \ \$?$ to check whether there is error.&lt;/p&gt;</content><author><name>dianjiaogit</name></author><summary type="html">(Continue)</summary></entry></feed>