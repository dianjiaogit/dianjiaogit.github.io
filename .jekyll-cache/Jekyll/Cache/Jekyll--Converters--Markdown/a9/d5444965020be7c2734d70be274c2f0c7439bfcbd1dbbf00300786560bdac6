I"—<h1 id="compilation">Compilation</h1>

<h3 id="isa-risc-vs-cisc">ISA: RISC VS CISC</h3>
<ul>
  <li>
    <p>RISC:<br />
ARM<br />
Single cycle instructions<br />
Small number of instructions</p>
  </li>
  <li>
    <p>CISC:
Intel x86<br />
An instruction can take several clock cycles<br />
Microcode<br />
Large number of instructions</p>
  </li>
</ul>

<h3 id="assembly-x86-64">Assembly x86-64</h3>
<p>Side effect flags<br />
32-bits: arguments in the stack<br />
64-bits: registers used for arguments then the stack<br />
eip(32bit)/rip(64bit) program counter/instruction pointer</p>

<h3 id="assembler">Assembler</h3>
<p>Input: Assembly files<br />
Output Object files(Machine code)/modules<br />
use -c to generate<br />
Relocatable<br />
Position Independent Code</p>

<h3 id="linker">Linker</h3>
<p>Input: Object files <br />
Output: Binary code</p>

<h2 id="static-library">Static Library</h2>
<p>Merged into binary executable<br />
References resolved entirely</p>

<h2 id="dynamic-library">Dynamic Library</h2>
<p>Shared in memory 
Symbolic references in the final executable, resolved when loaded to memory.</p>

<h3 id="libc">Libc</h3>
<p>Shared library<br />
Provide core functionalities to GNU system</p>

<h2 id="symbols">Symbols</h2>
<p>Symbolic names and record which binary code and data correspond to each symbol</p>

<h2 id="disassembly">Disassembly</h2>
<p>Translate machine instructions back into assembly<br />
Has a lot more code<br />
contains sections<br />
resolces incomplete code and data reference</p>

<h2 id="tools">Tools</h2>
<p>GDB (GNU Debugger):<br />
See inside a program during execution <br />
GEF: <br />
exploit dev and reverse-engineering<br />
Ghidra:<br />
software analysis tools and features</p>

<p><br /></p>

<hr />
<p><br /></p>

<h1 id="elf-format">ELF Format</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Executable and Linkable Format  
</code></pre></div></div>

<p>Used for executable files, object files, shared libraries and core dumps.</p>

<h2 id="components">Components:</h2>
<ul>
  <li>Executable headers</li>
  <li>Program headers (op) - used by linker</li>
  <li>Sections</li>
  <li>Section headers (op) - used by linker</li>
</ul>

<h3 id="executable-header">Executable Header</h3>
<p>Information about the binary</p>

<h3 id="sections-and-section-headers">Sections and Section Headers</h3>
<p>Depending on the contents<br />
Not all used during execution</p>

<p>NULL: a section without entry, name, nor bytes; mark the first section header.<br />
.init: Run before others execute.<br />
.fini: Run after program completes.<br />
.text: Main code; Executable not writable; SHT_PROGBITS: contains user-defined code; Usually point to _start and __libc_start_main.<br />
.rodata: read only data; constant values.<br />
.data: Default values; Writable.<br />
.bss: Block started by symbol. Reserve space for uninitialized variables. Writable.</p>
:ET