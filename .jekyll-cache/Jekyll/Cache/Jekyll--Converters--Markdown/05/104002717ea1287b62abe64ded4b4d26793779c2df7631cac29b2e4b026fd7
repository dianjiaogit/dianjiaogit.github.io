I"Ì	<h3 id="fundamentals-of-binary-analysis">Fundamentals of binary analysis:</h3>
<ul>
  <li>binary format</li>
  <li>disassembly</li>
  <li>code injection</li>
</ul>

<h3 id="exploitations-techniques">Exploitations techniques:</h3>
<ul>
  <li>stack-based exploitation</li>
  <li>heap exploitation</li>
</ul>

<h3 id="vulnerability-discovery">Vulnerability discovery:</h3>
<ul>
  <li>binary instrumentaion</li>
  <li>fuzzing</li>
  <li>symbolic execution</li>
</ul>

<p><br /></p>

<hr />
<p><br /></p>

<h2 id="binary-analysis">Binary analysis:</h2>
<p>program -&gt; machine code<br />
security gap<br />
what high level program does VS what it really does</p>

<p>Focus on Linux binary (ELF) and x86 assembly.</p>

<h3 id="static-analysis">Static analysis:</h3>
<p>Analysing without running it.<br />
platform independent<br />
Less precise. Generally udecidable.</p>

<h3 id="dynamic-analysis">Dynamic analysis:</h3>
<p>Runs the binary as it executes<br />
More precise. Access to entire system states<br />
May miss some code. See particular runs. Not all possible.</p>

<h2 id="challenges-in-binary-analysis">Challenges in binary analysis:</h2>
<p>No symbolic information<br />
No type information<br />
No high-level abstraction<br />
Mixed code and data<br />
Location dependent data and code</p>

<h2 id="loading-and-executing">Loading and Executing:</h2>
<p>Representation in-memory may differ from on-disk representation<br />
Setting up a new process, virtual address space.<br />
Maps an interpreter into virtual memory<br />
Transfer control to interpreter<br />
In Linux, interpreter is a shared library called <em>Id-linux</em>.so</p>

<h3 id="interpretere">Interpretere:</h3>
<p>Loads binary into virtual address space.<br />
Maps required dynamic libraried into virtual address space<br />
Relocation if required</p>
<ul>
  <li>usually lazy-binding<br />
Transfer control to the entry point</li>
</ul>

<p><br /></p>

<hr />
<p><br /></p>

<h2 id="compilation">Compilation:</h2>
<p>normal code -&gt; machine code</p>

<ul>
  <li>preprocessing</li>
  <li>compilation</li>
  <li>assembly</li>
  <li>linking</li>
</ul>

<p>GCC does all by default, but any of the steps can be stopped.</p>

<h3 id="compiler">Compiler:</h3>
<p>Input preprocessed source files<br />
Output Assembly files<br />
normal code -&gt; assembly<br />
Optimization<br />
-S flag to stop after compiler<br />
Default is AT&amp;T syntax, use -masm=intel to change to Intel syntax</p>

<p>e.g. gcc -S -masm=Intel example.c</p>
:ET