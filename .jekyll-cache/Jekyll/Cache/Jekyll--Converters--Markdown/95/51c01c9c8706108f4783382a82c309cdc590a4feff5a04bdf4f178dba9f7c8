I"g<h1 id="static-disassembly">Static Disassembly</h1>
<p>Load a binary<br />
find machine instructions in binary<br />
disassemble into human- or machine readable form</p>

<h2 id="recursive-disassembly">Recursive Disassembly</h2>
<p>Starts from known entry points<br />
Recursively follows control flow<br />
Used in many reverse-engineering applications</p>

<h1 id="dynamic-disassembly">Dynamic Disassembly</h1>
<p>Runtime information can resolve indirect calls, distinguishing data vs code<br />
It allows for execution tracers to dump instructions, memory/register contents<br />
Code coverage problem</p>

<h2 id="code-coverage">Code coverage</h2>
<h3 id="test-suites">test suites</h3>
<p>Use known test inputs, manually developed, toincrease code coverage.<br />
Trying to cover as much of the program’s functionality as possible.<br />
Ready-made test suites aren’t always available.<br />
Application specific.</p>

<h3 id="fuzzing">Fuzzing</h3>
<p>Automatically generate inputs<br />
Favoring executing lots of tests to heavy duty analysis<br />
Generation-based fuzzer<br />
Mutation-based fuzzer</p>

<h2 id="symbolic-execution">Symbolic Execution</h2>
<p>Execute not with concrete values but symblic values<br />
One exection path will generate a set of constraints<br />
Path explosion</p>

<h1 id="structuring-disassembled-code-and-data">Structuring Disassembled Code and Data</h1>
<p>Compartmentalizing</p>
<ul>
  <li>Breaking code into logically connected chunks and make it easier to understand the relationship between chunks.<br />
Revealing control flow</li>
  <li>Some structures can reveal control flow. Especially in visual representation, it can make it easier to see how control flows through the code and to get a quick idea of what the code does.</li>
</ul>

<h2 id="functions">Functions</h2>
<p>logically connected codes<br />
function detection</p>
<ul>
  <li>binaries can be stripped</li>
  <li>code might be scattered</li>
  <li>overlapping code blocks</li>
  <li>Assume functions are contiguous and don’t share code</li>
</ul>

<p>Based on function signatures:</p>
<ul>
  <li>well-known patterns and epilogues</li>
  <li>vary depending on the platform, compiler and optimization level used.</li>
</ul>

<p>Use $call$ for function so easy to locate.<br />
Indirect and tail-call function</p>

<h2 id="control-flow-graph">Control Flow Graph</h2>
<p>CFG organize the inernals of a function<br />
automated analysis, manual analysis<br />
graphic representation<br />
basic blocks: 1st instruction is the only entry point, last instruction is the only exit point<br />
call edges are not part of CFG</p>

<h2 id="call-graph">Call Graph</h2>
<p>show relationship between call sites and functions rather than basic blocks<br />
indirect call not shown in call graph</p>

<p>direct call: call the specific funtion or address<br />
indirect call: call the address stored in a register.</p>
:ET